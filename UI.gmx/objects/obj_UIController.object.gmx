<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is a handler object, tasked with setting up the UI and keeping track of Z-levels.

// Initialize some variables
window[0]   = 0;
windowZ[0]  = 0;
windowZ[1]  = 1;
windowCount = 0;

// THEMING - Color - These are accessed by windows to theme them.
borderColor      = c_black;  // Window Border Color
borderColorSel   = c_gray; // Window Border Color (When mouse is in bounds)
windowColor1     = c_navy; // Upper Fade Color
windowColor2     = c_ltgray;  // Lower Fade Color
windowColorInner = c_white;  // Inner Window Color
titleColor       = c_white;  // Title Color
titleColorShade  = c_dkgray; // Title Color Shadow

// THEMING - Size
Padding  =  2;  // Window Padding (Between Borders) - Also used for window buttons and title.
tHeight  =  16; // Title Height (The space between the top outer and inner borders, not including padding) - Also used for window button widths.
Border   =  1;  // Window Border *Broken due to oversight. Set to 1.*

// MOUSE THEMING - This creates obj_UIMouse. Use it to style the mouse if you'd like. Otherwise leave it empty, but keep the object.
mouseHeld = 0;
instance_create(0,0,obj_UIMouse);

// DEBUG Window
debugWindow = ui_create_window(2,32,512,320,320,id);
window[debugWindow].Title   = "UIDebug";
window[debugWindow].visible = true;
window[debugWindow].closeButton = false; // Disable the close button for this window.

// A test window.
testWindow = ui_create_window(2,2,320,240,240,id); // Test window 1
window[testWindow].Title   = "Test Window 1";
window[testWindow].visible = true; // For testing purposes, we're going to make it instantly visible.
window[testWindow].closeButton  = false; // Disable all window buttons for this window.
window[testWindow].windowBlinds = false;


// A test window.
testWindow2 = ui_create_window(32,32,320,240,240,id); // Test window 2
window[testWindow2].Title   = "Test Window 2";
window[testWindow2].visible = true; // For testing purposes, we're going to make it instantly visible.
window[testWindow2].windowBlinds = false; // Disable window blinds for this window.

// A test window.
testWindow3 = ui_create_window(64,64,320,240,240,id); // Test window 2
window[testWindow3].Title   = "Test Window 3";
window[testWindow3].visible = true; // For testing purposes, we're going to make it instantly visible.

// DEBUG
if windowCount &gt; 0 {
    for (i=windowCount;i&gt;0;i-=1) {
        show_message("Title: "+string(window[i].Title)+" // W-ID ("+string(i)+") // O-ID ("+string(window[i])+") // Vis: "+string(window[i].visible)+" // Z: "+string(window[i].z));
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG
if keyboard_check_released(vk_space) {
    if debugA = 0 {
        ui_bring_to_front(id,testWindow);
        debugA = 1;
    } else {
        ui_bring_to_front(id,testWindow2);
        debugA = 0;
    };
};

// List windows by Z-value, lowest first.
for (newZ=1;newZ&lt;=windowCount;newZ+=1)  {
    for (i=windowCount;i&gt;=1;i-=1) {
        if window[i].z = newZ {windowZ[newZ] = i};
    };
};

// Mouse Control
// obj_UIMouse is used for displaying tooltips and styling the mouse.
obj_UIMouse.x = mouse_x;
obj_UIMouse.y = mouse_y;

// Check mouse position by Z value. Break when a window is found to be acceptable, but pass the info along to the window.
// mouseHeld superceeds this.
zFound = 0;

if !mouseHeld {
    for (i=1;i&lt;=windowCount;i+=1)  {
        zID = windowZ[i];
        if !zFound {
            if !window[zID].blindsMode {
                if ((mouse_x&gt;=window[zID].x) and (mouse_x&lt;=(window[zID].x+window[zID].Width))) and ((mouse_y&gt;=window[zID].y) and (mouse_y&lt;=(window[zID].y+window[zID].Height))) {
                    window[zID].mouseInBounds = true;
                    zFound = 1;
                } else {
                    window[zID].mouseInBounds = false;
                    zFound = 0;
                };
            } else {
                if ((mouse_x&gt;=window[zID].x) and (mouse_x&lt;=(window[zID].x+window[zID].Width))) and ((mouse_y&gt;=window[zID].y) and (mouse_y&lt;=(window[zID].y+(window[zID].tHeight+(window[zID].Padding+1))))) {
                    window[zID].mouseInBounds = true;
                    zFound = 1;
                } else {
                    window[zID].mouseInBounds = false;
                    zFound = 0;
                };
            };
        } else {
            window[zID].mouseInBounds = false;
        };
    }; // I
} else {

if !mouse_check_button(mb_left) {mouseHeld = 0;};

};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Clear surfaces.
for(dWindow=windowCount;dWindow&gt;0;dWindow-=1) {
    with window[dWindow] {surface_free(Surface);};
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG - Now draws to the debug window.
surface_set_target(window[debugWindow].Surface);
draw_rectangle(-1,-1, window[debugWindow].Width-(2*((2*window[debugWindow].Border)+window[debugWindow].Padding)),window[debugWindow].iHeight,0);

draw_set_color(c_black);

draw_text(2,2,"mouseHeld: "+string(mouseHeld));
draw_text(2,16+2,"Window Count: "+string(windowCount));

if windowCount &gt; 0 {
    for (i=windowCount;i&gt;0;i-=1) {
        draw_text(10,16+2+(16*i),"Title: "+string(window[i].Title)+" // W-ID ("+string(i)+") // O-ID ("+string(window[i])+") // Vis: "+string(window[i].visible)+" // Z: "+string(window[i].z));
    };
};
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
