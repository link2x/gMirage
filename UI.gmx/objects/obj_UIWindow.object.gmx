<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sets the depth of the window for different Z values.
depth = -10000 + z;

// Mouse Control
if mouseInBounds { // If the mouse was detected by UIWindow to be within the usable space.
    if (mouse_check_button_pressed(mb_left) and !UIController.mouseHeld) {
        UIController.mouseHeld = 1;
        ui_bring_to_front(UIController,windowID);
        if (mouse_y&lt;=(y+tHeight+1)) {
            if closeButton and windowBlinds {
                if (mouse_x&lt;=(x+Width-((tHeight+1)*2))) {Dragging = 1; mouseXOffset = mouse_x-x; mouseYOffset = mouse_y-y;};
            } else if closeButton or windowBlinds {
                if (mouse_x&lt;=(x+Width-(tHeight+1))) {Dragging = 1; mouseXOffset = mouse_x-x; mouseYOffset = mouse_y-y;};
            } else {
                if (mouse_x&lt;=(x+Width)) {Dragging = 1; mouseXOffset = mouse_x-x; mouseYOffset = mouse_y-y;};
            };
        };
    } else if ((!mouse_check_button(mb_left)) and (UIController.mouseHeld)) {
        UIController.mouseHeld = 0;
        if Dragging {Dragging = 0;};
    };
    
    // Window Blinds - RightClick check.
    if ((mouse_check_button_released(mb_right)) and ((mouse_y&lt;=(y+tHeight+1)) and (mouse_y&gt;=y))
        and ((mouse_x&gt;=x) and (mouse_x&lt;=x+Width-((tHeight+1)*2)))) {
            if windowBlinds {blindsMode = !blindsMode;};
            ui_bring_to_front(UIController,windowID);
    };
    
    // Buttons - Check mouse position.
    if closeButton and windowBlinds {
        if (mouse_y&lt;=(y+tHeight+1)) and ((mouse_x&lt;x+Width) and (mouse_x&gt;(x+Width-(tHeight+1)))) {
            overClose = 1;
        } else {
            overClose = 0;
        };
        if (mouse_y&lt;=(y+tHeight+1)) and ((mouse_x&lt;(x+Width-(tHeight+1))) and (mouse_x&gt;(x+Width-((tHeight+1)*2)))) {
            overBlinds = 1;
        } else {
            overBlinds = 0;
        };
    } else if closeButton or windowBlinds {
        if (mouse_y&lt;=(y+tHeight+1)) and ((mouse_x&lt;x+Width) and (mouse_x&gt;(x+Width-(tHeight+1)))) {
            overClose  = closeButton;
            overBlinds = windowBlinds;
        } else {
            overClose  = 0;
            overBlinds = 0;
        };
    };
    
    // Buttons - Actual click code.
    if (mouse_check_button_released(mb_left)) {
        if overClose {visible = 0;};
        if overBlinds {blindsMode = !blindsMode;};
    };
    
} else { // Checks for when the mouse is out of bounds.
overClose  = 0; // BUG FIX
overBlinds = 0; // These can sometimes if the mouse is moved over them too fast.
};

if !UIController.mouseHeld {
Dragging = 0;
}

if Dragging {
x = mouse_x-mouseXOffset;
y = mouse_y-mouseYOffset;
};

// Bug fix. Draws won't look very nice if we allow strange x/y values.
x = round(x);
y = round(y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !blindsMode { // Window Mode
// Main Window / Window Color
draw_rectangle_colour(x,y,x+Width,y+Height,UIController.windowColor1,UIController.windowColor1,UIController.windowColor2,UIController.windowColor2,0);

// Window Buttons
// Main Buttons
if closeButton and windowBlinds {
    draw_rectangle_colour(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),UIController.windowColor2,UIController.windowColor2,UIController.windowColor1,UIController.windowColor1,0);
    draw_rectangle_colour(x+Width-((tHeight+1)*2),y,x+Width-(tHeight+1),y+tHeight+(Padding+1),UIController.windowColor2,UIController.windowColor2,UIController.windowColor1,UIController.windowColor1,0);
} else if closeButton or windowBlinds {
    draw_rectangle_colour(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),UIController.windowColor2,UIController.windowColor2,UIController.windowColor1,UIController.windowColor1,0);
};

// Over Animation
if closeButton and windowBlinds {
    if overClose draw_rectangle_colour(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,0);
    if overBlinds draw_rectangle_colour(x+Width-((tHeight+1)*2),y,x+Width-(tHeight+1),y+tHeight+(Padding+1),UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,0);
} else if closeButton or windowBlinds {
    if (overClose or overBlinds) draw_rectangle_colour(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,0);
};

// Button Graphics
if closeButton and windowBlinds {
    // Shadows
    draw_set_color(UIController.titleColorShade);
    draw_line(x+Width+Padding-((tHeight+1)*2),y+Padding+1,x+Width-((tHeight+1)+Padding),y+Padding+1); // Overbar/WindowBlind icon.
    draw_line(x+Width-(tHeight+1)+Padding,y+tHeight-(Padding+1),x+Width-Padding,y+Padding+1); // X/Close icon. - 1
    draw_line(x+Width-(tHeight+1)+Padding,y+Padding+1,x+Width-Padding,y+tHeight-(Padding+1)); // X/Close icon. - 2    
    // Highlights
    draw_set_color(UIController.titleColor);
    draw_line(x+Width+Padding-((tHeight+1)*2),y+Padding,x+Width-((tHeight+1)+Padding),y+Padding); // Overbar/WindowBlind icon.
    draw_line(x+Width-(tHeight+1)+Padding,y+tHeight-(Padding),x+Width-Padding,y+Padding); // X/Close icon. - 1
    draw_line(x+Width-(tHeight+1)+Padding,y+Padding,x+Width-Padding,y+tHeight-(Padding)); // X/Close icon. - 2

} else {
    if closeButton {
        draw_set_color(UIController.titleColorShade);
        draw_line(x+Width-(tHeight+1)+Padding,y+tHeight-(Padding+1),x+Width-Padding,y+Padding+1); // X/Close icon. - 1
        draw_line(x+Width-(tHeight+1)+Padding,y+Padding+1,x+Width-Padding,y+tHeight-(Padding+1)); // X/Close icon. - 2 
        draw_set_color(UIController.titleColor);
        draw_line(x+Width-(tHeight+1)+Padding,y+tHeight-(Padding),x+Width-Padding,y+Padding); // X/Close icon. - 1
        draw_line(x+Width-(tHeight+1)+Padding,y+Padding,x+Width-Padding,y+tHeight-(Padding)); // X/Close icon. - 2
    } else if windowBlinds {
        draw_set_color(UIController.titleColorShade);
        draw_line(x+Width-(tHeight+1)+Padding,y+Padding+1,x+Width-Padding,y+Padding+1); // Overbar/WindowBlind icon.
        draw_set_color(UIController.titleColor);
        draw_line(x+Width-(tHeight+1)+Padding,y+Padding,x+Width-Padding,y+Padding); // Overbar/WindowBlind icon.
    };
};

// Borders
draw_set_colour(UIController.borderColor);
// Button Border
if (closeButton or windowBlinds) draw_rectangle(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),1);
if (closeButton and windowBlinds) draw_rectangle(x+Width-((tHeight+1)*2),y,x+Width-(tHeight+1),y+tHeight+(Padding+1),1);
// Outer Border
draw_rectangle(x,y,x+Width,y+Height,1);
// Inner Border
draw_rectangle(x+(Padding+1),y+(tHeight)+(Padding+1),x+Width-(Padding+1),y+Height-(Padding+1),1);

// Outer Border Highlight (On Mouse)
if mouseInBounds {
draw_set_colour(UIController.borderColorSel);
draw_rectangle(x,y,x+Width,y+Height,1); 
};

// Title
draw_set_font(fnt_UI);
draw_set_color(UIController.titleColorShade);
draw_text(x+(Padding+1),y+3,Title);
draw_set_color(UIController.titleColor);
draw_text(x+(Padding+1),y+2,Title);

// Inner Window
// This draw shouldn't be seen. If it is, something went wrong with the surface.
draw_set_color(UIController.windowColorInner);
draw_rectangle(x+(Padding+2),y+(tHeight)+(Padding+2),x+Width-(Padding+2),y+Height-(Padding+2),0);

// Inner Surface
draw_surface_part(Surface,0,0,Width-((2*Padding)+(3)), Height-((2*Padding)+(3)+(tHeight)),x+(Padding+2),y+(tHeight)+(Padding+2));

} else { // Blinds Mode

// Main Window / Window Color
draw_rectangle_colour(x,y,x+Width,y+(tHeight)+(Padding+1),UIController.windowColor1,UIController.windowColor1,UIController.windowColor2,UIController.windowColor2,0);

// Window Buttons
// Main Buttons
if closeButton and windowBlinds {
    draw_rectangle_colour(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),UIController.windowColor2,UIController.windowColor2,UIController.windowColor1,UIController.windowColor1,0);
    draw_rectangle_colour(x+Width-((tHeight+1)*2),y,x+Width-(tHeight+1),y+tHeight+(Padding+1),UIController.windowColor2,UIController.windowColor2,UIController.windowColor1,UIController.windowColor1,0);
} else if closeButton or windowBlinds {
    draw_rectangle_colour(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),UIController.windowColor2,UIController.windowColor2,UIController.windowColor1,UIController.windowColor1,0);
};

// Over Animation
if closeButton and windowBlinds {
    if overClose draw_rectangle_colour(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,0);
    if overBlinds draw_rectangle_colour(x+Width-((tHeight+1)*2),y,x+Width-(tHeight+1),y+tHeight+(Padding+1),UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,0);
} else if closeButton or windowBlinds {
    if (overClose or overBlinds) draw_rectangle_colour(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,UIController.windowColor1,0);
};

// Button Graphics
if closeButton and windowBlinds {
    // Shadows
    draw_set_color(UIController.titleColorShade);
    draw_line(x+Width+Padding-((tHeight+1)*2),y+Padding+1,x+Width-((tHeight+1)+Padding),y+Padding+1); // Overbar/WindowBlind icon.
    draw_line(x+Width-(tHeight+1)+Padding,y+tHeight-(Padding+1),x+Width-Padding,y+Padding+1); // X/Close icon. - 1
    draw_line(x+Width-(tHeight+1)+Padding,y+Padding+1,x+Width-Padding,y+tHeight-(Padding+1)); // X/Close icon. - 2    
    // Highlights
    draw_set_color(UIController.titleColor);
    draw_line(x+Width+Padding-((tHeight+1)*2),y+Padding,x+Width-((tHeight+1)+Padding),y+Padding); // Overbar/WindowBlind icon.
    draw_line(x+Width-(tHeight+1)+Padding,y+tHeight-(Padding),x+Width-Padding,y+Padding); // X/Close icon. - 1
    draw_line(x+Width-(tHeight+1)+Padding,y+Padding,x+Width-Padding,y+tHeight-(Padding)); // X/Close icon. - 2

} else {
    if closeButton {
        draw_set_color(UIController.titleColorShade);
        draw_line(x+Width-(tHeight+1)+Padding,y+tHeight-(Padding+1),x+Width-Padding,y+Padding+1); // X/Close icon. - 1
        draw_line(x+Width-(tHeight+1)+Padding,y+Padding+1,x+Width-Padding,y+tHeight-(Padding+1)); // X/Close icon. - 2 
        draw_set_color(UIController.titleColor);
        draw_line(x+Width-(tHeight+1)+Padding,y+tHeight-(Padding),x+Width-Padding,y+Padding); // X/Close icon. - 1
        draw_line(x+Width-(tHeight+1)+Padding,y+Padding,x+Width-Padding,y+tHeight-(Padding)); // X/Close icon. - 2
    } else if windowBlinds {
        draw_set_color(UIController.titleColorShade);
        draw_line(x+Width-(tHeight+1)+Padding,y+Padding+1,x+Width-Padding,y+Padding+1); // Overbar/WindowBlind icon.
        draw_set_color(UIController.titleColor);
        draw_line(x+Width-(tHeight+1)+Padding,y+Padding,x+Width-Padding,y+Padding); // Overbar/WindowBlind icon.
    };
};


// Borders
draw_set_colour(UIController.borderColor);
// Button Border
if (closeButton or windowBlinds) draw_rectangle(x+Width-(tHeight+1),y,x+Width,y+tHeight+(Padding+1),1);
if (closeButton and windowBlinds) draw_rectangle(x+Width-((tHeight+1)*2),y,x+Width-(tHeight+1),y+tHeight+(Padding+1),1);
// Outer Border
draw_rectangle(x,y,x+Width,y+(tHeight)+(Padding+1),1);

// Outer Border Highlight (On Mouse)
if mouseInBounds {
draw_set_colour(UIController.borderColorSel);
draw_rectangle(x,y,x+Width,y+(tHeight)+(Padding+1),1);
};

// Title
draw_set_font(fnt_UI);
draw_set_color(UIController.titleColorShade);
draw_text(x+(Padding+1),y+3,Title);
draw_set_color(UIController.titleColor);
draw_text(x+(Padding+1),y+2,Title);

};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
