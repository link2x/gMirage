<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sets the depth of the window for different Z values.
depth = -10000 + z;

// Mouse Control
if mouseInBounds { // If the mouse was detected by UIWindow to be within the usable space.
    if (mouse_check_button_pressed(mb_left) and !UIController.mouseHeld) {
        UIController.mouseHeld = 1;
        ui_bring_to_front(UIController,windowID);
        if (mouse_y&lt;=(y+tHeight+1)) {Dragging = 1; mouseXOffset = mouse_x-x; mouseYOffset = mouse_y-y;};
    } else if ((!mouse_check_button(mb_left)) and (UIController.mouseHeld)) {
        UIController.mouseHeld = 0;
        if Dragging {Dragging = 0;};
    }
    
    if ((mouse_check_button_released(mb_right)) and (mouse_y&lt;=(y+tHeight+1))) {
        blindsMode = !blindsMode;
        ui_bring_to_front(UIController,windowID);
    };
    
}

if !UIController.mouseHeld {
Dragging = 0;
}

if Dragging {
x = mouse_x-mouseXOffset;
y = mouse_y-mouseYOffset;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !blindsMode {
// Main Window / Window Color
draw_rectangle_colour(x,y,x+Width,y+Height,UIController.windowColor1,UIController.windowColor1,UIController.windowColor2,UIController.windowColor2,0);

// Borders
draw_set_colour(UIController.borderColor);
// Outer Border
draw_rectangle(x,y,x+Width,y+Height,1); 
// Inner Border
draw_rectangle(x+(Padding+1),y+(tHeight)+(Padding+1),x+Width-(Padding+1),y+Height-(Padding+1),1);

// Outer Border Highlight (On Mouse)
if mouseInBounds {
draw_set_colour(UIController.borderColorSel);
draw_rectangle(x,y,x+Width,y+Height,1); 
};

// Title
draw_set_font(fnt_UI);
draw_set_color(UIController.titleColorShade);
draw_text(x+(Padding+1),y+3,Title);
draw_set_color(UIController.titleColor);
draw_text(x+(Padding+1),y+2,Title);

// Inner Window
// This draw shouldn't be seen. If it is, something went wrong with the surface.
draw_set_color(UIController.windowColorInner);
draw_rectangle(x+(Padding+2),y+(tHeight)+(Padding+2),x+Width-(Padding+2),y+Height-(Padding+2),0);

// Inner Surface
draw_surface_part(Surface,0,0,Width-((2*Padding)+(3)), Height-((2*Padding)+(3)+(tHeight)),x+(Padding+2),y+(tHeight)+(Padding+2));

}; else {

// Main Window / Window Color
draw_rectangle_colour(x,y,x+Width,y+(tHeight)+(Padding+1),UIController.windowColor1,UIController.windowColor1,UIController.windowColor2,UIController.windowColor2,0);

// Borders
draw_set_colour(UIController.borderColor);
// Outer Border
draw_rectangle(x,y,x+Width,y+(tHeight)+(Padding+1),1);

// Outer Border Highlight (On Mouse)
if mouseInBounds {
draw_set_colour(UIController.borderColorSel);
draw_rectangle(x,y,x+Width,y+(tHeight)+(Padding+1),1);
};

// Title
draw_set_font(fnt_UI);
draw_set_color(UIController.titleColorShade);
draw_text(x+(Padding+1),y+3,Title);
draw_set_color(UIController.titleColor);
draw_text(x+(Padding+1),y+2,Title);

};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
